@StabilityInferred(parameters = 0)
abstract class UnstableMarker {
  var createdAt: Long = currentTimeMillis()
  static val $stable: Int = 8
}
@StabilityInferred(parameters = 0)
class UnstableAndAlwaysSameClass : UnstableMarker {
  override fun equals(other: Any?): Boolean {
    return true
  }
  override fun hashCode(): Int {
    return 42
  }
  static val $stable: Int = 8
}
@Stable
class StableClass : UnstableMarker {
  static val $stable: Int = 0
}
@Stable
class StableAndAlwaysSameClass : UnstableMarker {
  override fun equals(other: Any?): Boolean {
    return true
  }
  override fun hashCode(): Int {
    return 42
  }
  static val $stable: Int = 0
}
@Immutable
class ImmutableClass : UnstableMarker {
  static val $stable: Int = 0
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenUnstableAndAlwaysSameClassDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-299127152)
  sourceInformation($composer, "C(GivenUnstableAndAlwaysSameClassDemo)49@1842L33,51@1879L601:ConstructorCalls.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-299127152, $changed, -1, "boo.kodeeverse.composemagic.stability.GivenUnstableAndAlwaysSameClassDemo (ConstructorCalls.kt:48)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 301617681, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1129403424, "C56@2065L25,56@2051L66,61@2237L11,57@2122L229,65@2356L53,67@2415L61:ConstructorCalls.kt#b558il")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1487582747, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenUnstableAndAlwaysSameClass(UnstableAndAlwaysSameClass(), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenUnstableAndAlwaysSameClassDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenStableAndAlwaysSameClassDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1694384585)
  sourceInformation($composer, "C(GivenStableAndAlwaysSameClassDemo)72@2553L33,74@2590L597:ConstructorCalls.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1694384585, $changed, -1, "boo.kodeeverse.composemagic.stability.GivenStableAndAlwaysSameClassDemo (ConstructorCalls.kt:71)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 510982858, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 126865227, "C79@2776L25,79@2762L66,84@2948L11,80@2833L229,88@3067L53,90@3126L57:ConstructorCalls.kt#b558il")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1528118622, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenStableAndAlwaysSameClass(StableAndAlwaysSameClass(), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenStableAndAlwaysSameClassDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenStableClassViaArgumentDemo(value: StableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(-620647761)
  sourceInformation($composer, "C(GivenStableClassViaArgumentDemo)N(value)95@3292L33,97@3329L572:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($default and 0b0001 == 0 && $composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    $composer.startDefaults()
    if ($changed and 0b0001 == 0 || $composer.defaultsInvalid) {
      if ($default and 0b0001 != 0) {
        value = StableClass()
        $dirty = $dirty and 0b1110.inv()
      }
    } else {
      $composer.skipToGroupEnd()
      if ($default and 0b0001 != 0) {
        $dirty = $dirty and 0b1110.inv()
      }
    }
    $composer.endDefaults()
    if (isTraceInProgress()) {
      traceEventStart(-620647761, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenStableClassViaArgumentDemo (ConstructorCalls.kt:94)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 557958704, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1044506482, "C102@3524L25,102@3501L75,107@3696L11,103@3581L229,111@3815L53,113@3874L23:ConstructorCalls.kt#b558il")
      Text("ROOT argument @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -381942384, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenStableClass(value as StableClass, $composer, 0b1110 and $dirty)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenStableClassViaArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenStableClassViaPropDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(207978492)
  sourceInformation($composer, "C(GivenStableClassViaPropDemo)118@3968L33,121@4033L568:ConstructorCalls.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(207978492, $changed, -1, "boo.kodeeverse.composemagic.stability.GivenStableClassViaPropDemo (ConstructorCalls.kt:117)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1996130435, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = StableClass()
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -667988683, "C126@4224L25,126@4205L71,131@4396L11,127@4281L229,135@4515L53,137@4574L23:ConstructorCalls.kt#b558il")
      Text("ROOT prop @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 117005041, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenStableClass(value, $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenStableClassViaPropDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenImmutableClassViaArgumentDemo(value: ImmutableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(-1578680977)
  sourceInformation($composer, "C(GivenImmutableClassViaArgumentDemo)N(value)142@4715L33,144@4752L575:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($default and 0b0001 != 0) {
    $dirty = $dirty or 0b0110
  } else if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if ($default and 0b0001 != 0) {
      value = ImmutableClass()
    }
    if (isTraceInProgress()) {
      traceEventStart(-1578680977, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenImmutableClassViaArgumentDemo (ConstructorCalls.kt:141)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -988960240, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 47037839, "C149@4947L25,149@4924L75,154@5119L11,150@5004L229,158@5238L53,160@5297L26:ConstructorCalls.kt#b558il")
      Text("ROOT argumemt @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1661044784, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenImmutableClass(value as ImmutableClass, $composer, 0b1110 and $dirty)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenImmutableClassViaArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun GivenImmutableClassViaPropDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(2009429267)
  sourceInformation($composer, "C(GivenImmutableClassViaPropDemo)165@5397L33,168@5465L571:ConstructorCalls.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(2009429267, $changed, -1, "boo.kodeeverse.composemagic.stability.GivenImmutableClassViaPropDemo (ConstructorCalls.kt:164)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1673755852, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = ImmutableClass()
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1123454609, "C173@5656L25,173@5637L71,178@5828L11,174@5713L229,182@5947L53,184@6006L26:ConstructorCalls.kt#b558il")
      Text("ROOT prop @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -728971404, "CC(remember):ConstructorCalls.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      GivenImmutableClass(value, $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenImmutableClassViaPropDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun GivenUnstableAndAlwaysSameClass(value: UnstableAndAlwaysSameClass, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(972723027)
  sourceInformation($composer, "C(GivenUnstableAndAlwaysSameClass)N(value)190@6181L25,189@6135L240:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changedInstance(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(972723027, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenUnstableAndAlwaysSameClass (ConstructorCalls.kt:188)")
    }
    Text("GivenUnstableAndAlwaysSameClass @ ${<get-currentRecomposeScopeHash>($composer, 0)}
(${value.createdAt})", Companion.fillMaxWidth().wrapContentWidth(), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000110000, 0, 0b00111111101110111100)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenUnstableAndAlwaysSameClass(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun GivenStableAndAlwaysSameClass(value: StableAndAlwaysSameClass, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-874321997)
  sourceInformation($composer, "C(GivenStableAndAlwaysSameClass)N(value)201@6514L25,200@6470L238:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-874321997, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenStableAndAlwaysSameClass (ConstructorCalls.kt:199)")
    }
    Text("GivenStableAndAlwaysSameClass @ ${<get-currentRecomposeScopeHash>($composer, 0)}
(${value.createdAt})", Companion.fillMaxWidth().wrapContentWidth(), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000110000, 0, 0b00111111101110111100)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenStableAndAlwaysSameClass(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun GivenStableClass(value: StableClass, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(725758973)
  sourceInformation($composer, "C(GivenStableClass)N(value)212@6808L25,211@6777L117:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(725758973, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenStableClass (ConstructorCalls.kt:210)")
    }
    Text("GivenStableClass @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${value.createdAt})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenStableClass(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun GivenImmutableClass(value: ImmutableClass, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-2143261805)
  sourceInformation($composer, "C(GivenImmutableClass)N(value)219@7003L25,218@6969L120:ConstructorCalls.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-2143261805, $dirty, -1, "boo.kodeeverse.composemagic.stability.GivenImmutableClass (ConstructorCalls.kt:217)")
    }
    Text("GivenImmutableClass @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${value.createdAt})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    GivenImmutableClass(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Suppress(names = "NOTHING_TO_INLINE")
internal fun used(a: Any) { }
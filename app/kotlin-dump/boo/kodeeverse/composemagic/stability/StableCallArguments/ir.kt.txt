@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableCallArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-689220965)
  sourceInformation($composer, "C(StableCallArgumentDemo)30@1245L33,32@1282L572:StableCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-689220965, $changed, -1, "boo.kodeeverse.composemagic.stability.StableCallArgumentDemo (StableCallArguments.kt:29)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -916382276, "CC(remember):StableCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1170868274, "C37@1468L25,37@1454L66,42@1640L11,38@1525L229,46@1759L53,48@1818L32:StableCallArguments.kt#b558il")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 869059504, "CC(remember):StableCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StableCallArgument(stableCall(), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableCallArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableCallArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(153952116)
  sourceInformation($composer, "C(UnstableCallArgumentDemo)53@1918L33,55@1955L576:StableCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(153952116, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableCallArgumentDemo (StableCallArguments.kt:52)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1919096981, "CC(remember):StableCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 444980149, "C60@2141L25,60@2127L66,65@2313L11,61@2198L229,69@2432L53,71@2491L36:StableCallArguments.kt#b558il")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -262734903, "CC(remember):StableCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      UnstableCallArgument(unstableCall(), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableCallArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun StableCallArgument(value: Long, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1379296508)
  sourceInformation($composer, "C(StableCallArgument)N(value)77@2628L25,76@2595L107:StableCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1379296508, $dirty, -1, "boo.kodeeverse.composemagic.stability.StableCallArgument (StableCallArguments.kt:75)")
    }
    Text("StableCallArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)} ($value)", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableCallArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun UnstableCallArgument(value: Long, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-2072497707)
  sourceInformation($composer, "C(UnstableCallArgument)N(value)84@2803L25,83@2768L109:StableCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-2072497707, $dirty, -1, "boo.kodeeverse.composemagic.stability.UnstableCallArgument (StableCallArguments.kt:82)")
    }
    Text("UnstableCallArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)} ($value)", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableCallArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Stable
private fun stableCall(): Long {
  return currentTimeMillis()
}
private fun unstableCall(): Long {
  return currentTimeMillis()
}
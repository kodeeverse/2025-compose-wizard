@StabilityInferred(parameters = 0)
abstract class UnstableMarker {
  var createdAt: Long = currentTimeMillis()
  static val $stable: Int = 8
}
@Stable
class StableClass {
  static val $stable: Int = 0
}
@JvmInline
class StableBoxingClass(val value: Int) {
  override fun toString(): String {
    return "StableBoxingClass(value=${<this>.value})"
  }
  override fun hashCode(): Int {
    return <this>.value.hashCode()
  }
  override fun equals(other: Any?): Boolean {
    when {
      other !is Boolean -> {
        return false
      }
    }
    val tmp0_other_with_cast = other as StableBoxingClass
    when {
      <this>.value != tmp0_other_with_cast.value -> {
        return false
      }
    }
    return true
  }
}
@JvmInline
class UnstableBoxingClass(val value: Any) {
  override fun toString(): String {
    return "UnstableBoxingClass(value=${<this>.value})"
  }
  override fun hashCode(): Int {
    return <this>.value.hashCode()
  }
  override fun equals(other: Any?): Boolean {
    when {
      other !is Boolean -> {
        return false
      }
    }
    val tmp0_other_with_cast = other as UnstableBoxingClass
    when {
      <this>.value != tmp0_other_with_cast.value -> {
        return false
      }
    }
    return true
  }
}
@Stable
class StableAndAlwaysSameClass : UnstableMarker {
  override fun equals(other: Any?): Boolean {
    return true
  }
  override fun hashCode(): Int {
    return 42
  }
  static val $stable: Int = 0
}
@Immutable
class ImmutableClass {
  static val $stable: Int = 0
}
@Immutable
class ImmutableButNonStaticArgumentClass(val value: Any) {
  static val $stable: Int = 0
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableClassParameterIntoArgumentDemo(value: StableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(332352536)
  sourceInformation($composer, "C(StableClassParameterIntoArgumentDemo)N(value)49@1821L33,51@1858L668:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($default and 0b0001 == 0 && $composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    $composer.startDefaults()
    if ($changed and 0b0001 == 0 || $composer.defaultsInvalid) {
      if ($default and 0b0001 != 0) {
        value = StableClass()
        $dirty = $dirty and 0b1110.inv()
      }
    } else {
      $composer.skipToGroupEnd()
      if ($default and 0b0001 != 0) {
        $dirty = $dirty and 0b1110.inv()
      }
    }
    $composer.endDefaults()
    if (isTraceInProgress()) {
      traceEventStart(332352536, $dirty, -1, "boo.kodeeverse.composemagic.stability.StableClassParameterIntoArgumentDemo (StaticConstructorCallArguments.kt:48)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1563210233, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1692486197, "C58@2098L25,56@2030L162,65@2312L11,61@2197L229,69@2431L53,71@2490L32:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableClassParameterIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1301530861, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(value as StableClass, $composer, 0b1110 and $dirty)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableClassParameterIntoArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableClassPropertyIntoArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(816415533)
  sourceInformation($composer, "C(StableClassPropertyIntoArgumentDemo)76@2601L33,79@2666L667:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(816415533, $changed, -1, "boo.kodeeverse.composemagic.stability.StableClassPropertyIntoArgumentDemo (StaticConstructorCallArguments.kt:75)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1403686034, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = StableClass()
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 2099036129, "C86@2905L25,84@2838L161,93@3119L11,89@3004L229,97@3238L53,99@3297L32:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableClassPropertyIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -763564638, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(value, $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableClassPropertyIntoArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassParameterIntoArgumentDemo(value: ImmutableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(1834957122)
  sourceInformation($composer, "C(ImmutableClassParameterIntoArgumentDemo)N(value)104@3452L33,106@3489L671:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($default and 0b0001 != 0) {
    $dirty = $dirty or 0b0110
  } else if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if ($default and 0b0001 != 0) {
      value = ImmutableClass()
    }
    if (isTraceInProgress()) {
      traceEventStart(1834957122, $dirty, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassParameterIntoArgumentDemo (StaticConstructorCallArguments.kt:103)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1837761085, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 257238184, "C113@3732L25,111@3661L165,120@3946L11,116@3831L229,124@4065L53,126@4124L32:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassParameterIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1255232631, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(value as ImmutableClass, $composer, 0b1110 and $dirty)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassParameterIntoArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassPropertyIntoArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(296753880)
  sourceInformation($composer, "C(ImmutableClassPropertyIntoArgumentDemo)131@4238L33,134@4306L670:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(296753880, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassPropertyIntoArgumentDemo (StaticConstructorCallArguments.kt:130)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1712639161, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = ImmutableClass()
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1087607303, "C141@4548L25,139@4478L164,148@4762L11,144@4647L229,152@4881L53,154@4940L32:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassPropertyIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1697660697, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(value, $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassPropertyIntoArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableBoxingClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(839783257)
  sourceInformation($composer, "C(StableBoxingClassArgumentDemo)159@5045L33,161@5082L649:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(839783257, $changed, -1, "boo.kodeeverse.composemagic.stability.StableBoxingClassArgumentDemo (StaticConstructorCallArguments.kt:158)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -422139942, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1506705785, "C167@5288L25,166@5254L128,174@5502L11,170@5387L229,178@5621L53,180@5680L47:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableBoxing @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 505593390, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(StableBoxingClass(1), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableBoxingClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableBoxingClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-782124046)
  sourceInformation($composer, "C(UnstableBoxingClassArgumentDemo)185@5802L33,187@5839L657:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-782124046, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableBoxingClassArgumentDemo (StaticConstructorCallArguments.kt:184)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1929613, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -261669178, "C193@6047L25,192@6011L130,200@6261L11,196@6146L229,204@6380L53,206@6439L53:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT unstableBoxing @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1809548729, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(UnstableBoxingClass(Any()), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableBoxingClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1834044734)
  sourceInformation($composer, "C(StableClassArgumentDemo)211@6559L33,213@6596L641:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1834044734, $changed, -1, "boo.kodeeverse.composemagic.stability.StableClassArgumentDemo (StaticConstructorCallArguments.kt:210)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1580396477, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 895347206, "C219@6801L25,218@6768L127,226@7015L11,222@6900L229,230@7134L53,232@7193L40:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableClass @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1275815607, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(StableClass(), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1718825709)
  sourceInformation($composer, "C(ImmutableClassArgumentDemo)237@7303L33,239@7340L647:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1718825709, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassArgumentDemo (StaticConstructorCallArguments.kt:236)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1770900978, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -340631031, "C245@7548L25,244@7512L130,252@7762L11,248@7647L229,256@7881L53,258@7940L43:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClass @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -149527890, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(ImmutableClass(), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableButNonStaticArgumentClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1297857796)
  sourceInformation($composer, "C(ImmutableButNonStaticArgumentClassArgumentDemo)263@8073L33,265@8110L706:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1297857796, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableButNonStaticArgumentClassArgumentDemo (StaticConstructorCallArguments.kt:262)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1700828389, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 924338871, "C272@8352L25,270@8282L164,279@8566L11,275@8451L229,283@8685L53,285@8744L68:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassButNonStaticArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1276751941, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(ImmutableButNonStaticArgumentClass(Any()), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableButNonStaticArgumentClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
private fun StaticConstructorArgument(value: Any, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(831392616)
  sourceInformation($composer, "C(StaticConstructorArgument)N(value)291@8926L25,290@8886L162:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changedInstance(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(831392616, $dirty, -1, "boo.kodeeverse.composemagic.stability.StaticConstructorArgument (StaticConstructorCallArguments.kt:289)")
    }
    Text("StaticConstructorArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
(${value.hashCode()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111101110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticConstructorArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
internal fun used(a: Any) { }
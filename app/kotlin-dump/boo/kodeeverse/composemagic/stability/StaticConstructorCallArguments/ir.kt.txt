@StabilityInferred(parameters = 0)
abstract class UnstableMarker {
  var createdAt: Long = currentTimeMillis()
  static val $stable: Int = 8
}
@StabilityInferred(parameters = 0)
class UnstableAndAlwaysSameClass : UnstableMarker {
  override fun equals(other: Any?): Boolean {
    return true
  }
  override fun hashCode(): Int {
    return 42
  }
  static val $stable: Int = 8
}
@Stable
class StableClass : UnstableMarker {
  static val $stable: Int = 0
}
@JvmInline
class StableBoxingClass(val value: Int) {
  override fun toString(): String {
    return "StableBoxingClass(value=${<this>.value})"
  }
  override fun hashCode(): Int {
    return <this>.value.hashCode()
  }
  override fun equals(other: Any?): Boolean {
    when {
      other !is Boolean -> {
        return false
      }
    }
    val tmp0_other_with_cast = other as StableBoxingClass
    when {
      <this>.value != tmp0_other_with_cast.value -> {
        return false
      }
    }
    return true
  }
}
@JvmInline
class UnstableBoxingClass(val value: Any) {
  override fun toString(): String {
    return "UnstableBoxingClass(value=${<this>.value})"
  }
  override fun hashCode(): Int {
    return <this>.value.hashCode()
  }
  override fun equals(other: Any?): Boolean {
    when {
      other !is Boolean -> {
        return false
      }
    }
    val tmp0_other_with_cast = other as UnstableBoxingClass
    when {
      <this>.value != tmp0_other_with_cast.value -> {
        return false
      }
    }
    return true
  }
}
@Stable
class StableAndAlwaysSameClass : UnstableMarker {
  override fun equals(other: Any?): Boolean {
    return true
  }
  override fun hashCode(): Int {
    return 42
  }
  static val $stable: Int = 0
}
@Immutable
class ImmutableClass(val staticValue: Int) : UnstableMarker {
  static val $stable: Int = 0
}
@Immutable
class ImmutableButNonStaticArgumentClass(val value: Any) {
  static val $stable: Int = 0
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableAndAlwaysSameClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(518765059)
  sourceInformation($composer, "C(UnstableAndAlwaysSameClassArgumentDemo)54@1993L33,56@2030L708:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(518765059, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableAndAlwaysSameClassArgumentDemo (StaticConstructorCallArguments.kt:53)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 317017380, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 773006230, "C63@2272L25,61@2202L164,70@2486L11,66@2371L229,74@2605L53,76@2664L70:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT unstableAndAlwaysSameClassArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 302038916, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(UnstableAndAlwaysSameClass()), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableAndAlwaysSameClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableClassParameterIntoArgumentDemo(value: StableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(332352536)
  sourceInformation($composer, "C(StableClassParameterIntoArgumentDemo)N(value)81@2848L33,83@2885L683:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($default and 0b0001 == 0 && $composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    $composer.startDefaults()
    if ($changed and 0b0001 == 0 || $composer.defaultsInvalid) {
      if ($default and 0b0001 != 0) {
        value = StableClass()
        $dirty = $dirty and 0b1110.inv()
      }
    } else {
      $composer.skipToGroupEnd()
      if ($default and 0b0001 != 0) {
        $dirty = $dirty and 0b1110.inv()
      }
    }
    $composer.endDefaults()
    if (isTraceInProgress()) {
      traceEventStart(332352536, $dirty, -1, "boo.kodeeverse.composemagic.stability.StableClassParameterIntoArgumentDemo (StaticConstructorCallArguments.kt:80)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1563210233, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1692486662, "C90@3125L25,88@3057L162,97@3339L11,93@3224L229,101@3458L53,103@3517L47:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableClassParameterIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1301530861, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(value as StableClass), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableClassParameterIntoArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableClassPropertyIntoArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(816415533)
  sourceInformation($composer, "C(StableClassPropertyIntoArgumentDemo)108@3643L33,111@3708L682:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(816415533, $changed, -1, "boo.kodeeverse.composemagic.stability.StableClassPropertyIntoArgumentDemo (StaticConstructorCallArguments.kt:107)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1403686034, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = StableClass()
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 2099036594, "C118@3947L25,116@3880L161,125@4161L11,121@4046L229,129@4280L53,131@4339L47:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableClassPropertyIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -763564638, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(value), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableClassPropertyIntoArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassParameterIntoArgumentDemo(value: ImmutableClass?, $composer: Composer?, $changed: Int, $default: Int) {
  $composer = $composer.startRestartGroup(1834957122)
  sourceInformation($composer, "C(ImmutableClassParameterIntoArgumentDemo)N(value)136@4510L33,138@4547L686:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($default and 0b0001 != 0) {
    $dirty = $dirty or 0b0110
  } else if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if ($default and 0b0001 != 0) {
      value = ImmutableClass(1)
    }
    if (isTraceInProgress()) {
      traceEventStart(1834957122, $dirty, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassParameterIntoArgumentDemo (StaticConstructorCallArguments.kt:135)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1837761053, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 257238649, "C145@4790L25,143@4719L165,152@5004L11,148@4889L229,156@5123L53,158@5182L47:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassParameterIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1255232631, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(value as ImmutableClass), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassParameterIntoArgumentDemo(value, $composer, updateChangedFlags($changed or 0b0001), $default)
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassPropertyIntoArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(296753880)
  sourceInformation($composer, "C(ImmutableClassPropertyIntoArgumentDemo)163@5311L33,166@5380L685:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(296753880, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassPropertyIntoArgumentDemo (StaticConstructorCallArguments.kt:162)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1712639161, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    val value = ImmutableClass(1)
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1087607768, "C173@5622L25,171@5552L164,180@5836L11,176@5721L229,184@5955L53,186@6014L47:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassPropertyIntoArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1697660697, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(value), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassPropertyIntoArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableBoxingClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(839783257)
  sourceInformation($composer, "C(StableBoxingClassArgumentDemo)191@6134L33,193@6171L664:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(839783257, $changed, -1, "boo.kodeeverse.composemagic.stability.StableBoxingClassArgumentDemo (StaticConstructorCallArguments.kt:190)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -422139942, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1506705320, "C199@6377L25,198@6343L128,206@6591L11,202@6476L229,210@6710L53,212@6769L62:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT stableBoxing @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 505593390, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(StableBoxingClass(1)), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableBoxingClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableBoxingClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-782124046)
  sourceInformation($composer, "C(UnstableBoxingClassArgumentDemo)217@6906L33,219@6943L672:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-782124046, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableBoxingClassArgumentDemo (StaticConstructorCallArguments.kt:216)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1929613, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -261668713, "C225@7151L25,224@7115L130,232@7365L11,228@7250L229,236@7484L53,238@7543L68:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT unstableBoxing @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1809548729, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(UnstableBoxingClass(Any())), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableBoxingClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1718825709)
  sourceInformation($composer, "C(ImmutableClassArgumentDemo)243@7681L33,245@7718L663:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1718825709, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableClassArgumentDemo (StaticConstructorCallArguments.kt:242)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1770900978, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -340630535, "C251@7926L25,250@7890L130,258@8140L11,254@8025L229,262@8259L53,264@8318L59:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClass @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -149527890, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(ImmutableClass(1)), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ImmutableButNonStaticArgumentClassArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1297857796)
  sourceInformation($composer, "C(ImmutableButNonStaticArgumentClassArgumentDemo)269@8467L33,271@8504L721:StaticConstructorCallArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1297857796, $changed, -1, "boo.kodeeverse.composemagic.stability.ImmutableButNonStaticArgumentClassArgumentDemo (StaticConstructorCallArguments.kt:268)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1700828389, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 924339336, "C278@8746L25,276@8676L164,285@8960L11,281@8845L229,289@9079L53,291@9138L83:StaticConstructorCallArguments.kt#b558il")
      Text("ROOT immutableClassButNonStaticArgument
      ${"@ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1276751941, "CC(remember):StaticConstructorCallArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticConstructorArgument(currentMsCall(ImmutableButNonStaticArgumentClass(Any())), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ImmutableButNonStaticArgumentClassArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun StaticConstructorArgument(value: Long, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-942240974)
  sourceInformation($composer, "C(StaticConstructorArgument)N(value)297@9336L25,296@9296L149:StaticConstructorCallArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-942240974, $dirty, -1, "boo.kodeeverse.composemagic.stability.StaticConstructorArgument (StaticConstructorCallArguments.kt:295)")
    }
    Text("StaticConstructorArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
($value)", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111101110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticConstructorArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Stable
private fun currentMsCall(value: Any): Long {
  return currentTimeMillis() + value.hashCode()
}
internal fun used(a: Any) { }
val stableValueProperty: MyStableClass = MyStableClass()
@Stable
var stableVariableProperty: MyStableClass
  get() {
    return MyStableClass()
  }
  set(value) {
  }
var variableProperty: MyStableClass
  get() {
    return MyStableClass()
  }
  set(value) {
  }
private class MyEnum : Enum<MyEnum> {
  <<IrEnumEntryImpl>>
  fun values(): Array<MyEnum> { }
  fun valueOf(value: String): MyEnum { }
  val entries: EnumEntries<MyEnum>
    get() {
      <<IrSyntheticBodyImpl>>
    }
}
@Stable
private object StableObject 
private object UnstableObject {
  var a: Any = listOf(1)
}
@Stable
private class MyStableClass 
private open class MyRegularClass {
  var a: Any = listOf(1)
  object Companion : MyRegularClass 
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ConstArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1191579306)
  sourceInformation($composer, "C(ConstArgumentDemo)59@1828L33,61@1865L659:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1191579306, $changed, -1, "boo.kodeeverse.composemagic.stability.ConstArgumentDemo (StaticExpressionArguments.kt:58)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1648556311, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1678748148, "C67@2072L25,66@2037L143,75@2300L11,71@2185L229,79@2419L53,81@2478L42:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT constArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1162539767, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(1), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ConstArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun EnumEntryArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-43892636)
  sourceInformation($composer, "C(EnumEntryArgumentDemo)86@2585L33,88@2622L670:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-43892636, $changed, -1, "boo.kodeeverse.composemagic.stability.EnumEntryArgumentDemo (StaticExpressionArguments.kt:85)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 768851237, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1582933115, "C94@2833L25,93@2794L147,102@3061L11,98@2946L229,106@3180L53,108@3239L49:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT enumEntryArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1713638405, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(MyEnum.A), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    EnumEntryArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun CompanionObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1463723742)
  sourceInformation($composer, "C(CompanionObjectArgumentDemo)113@3359L33,115@3396L692:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1463723742, $changed, -1, "boo.kodeeverse.composemagic.stability.CompanionObjectArgumentDemo (StaticExpressionArguments.kt:112)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -2110755361, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1847269099, "C121@3613L25,120@3568L153,129@3841L11,125@3726L229,133@3960L53,135@4019L65:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT companionObjectArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1741517761, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(Companion), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    CompanionObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1929206953)
  sourceInformation($composer, "C(StableObjectArgumentDemo)140@4152L33,142@4189L677:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1929206953, $changed, -1, "boo.kodeeverse.composemagic.stability.StableObjectArgumentDemo (StaticExpressionArguments.kt:139)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1457988470, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -781692389, "C148@4403L25,147@4361L150,156@4631L11,152@4516L229,160@4750L53,162@4809L53:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT stableObjectArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -440849730, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(StableObject), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(179650690)
  sourceInformation($composer, "C(UnstableObjectArgumentDemo)167@4932L33,169@4969L681:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(179650690, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableObjectArgumentDemo (StaticExpressionArguments.kt:166)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 845622883, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 813706910, "C175@5185L25,174@5141L152,183@5413L11,179@5298L229,187@5532L53,189@5591L55:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT unstableObjectArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -943574505, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(UnstableObject), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableValuePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-2072411298)
  sourceInformation($composer, "C(StableValuePropertyArgumentDemo)194@5721L33,196@5758L691:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-2072411298, $changed, -1, "boo.kodeeverse.composemagic.stability.StableValuePropertyArgumentDemo (StaticExpressionArguments.kt:193)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1277569759, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -327322292, "C202@5979L25,201@5930L157,210@6207L11,206@6092L229,214@6326L53,216@6385L60:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT stableValuePropertyArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1396023745, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(stableValueProperty), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableValuePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableVariablePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-24254693)
  sourceInformation($composer, "C(StableVariablePropertyArgumentDemo)221@6523L33,223@6560L697:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-24254693, $changed, -1, "boo.kodeeverse.composemagic.stability.StableVariablePropertyArgumentDemo (StaticExpressionArguments.kt:220)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1833921604, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1972699477, "C229@6784L25,228@6732L160,237@7012L11,233@6897L229,241@7131L53,243@7190L63:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT stableVariablePropertyArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -906187408, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(stableVariableProperty), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableVariablePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun VariablePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(207008128)
  sourceInformation($composer, "C(VariablePropertyArgumentDemo)248@7325L33,250@7362L685:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(207008128, $changed, -1, "boo.kodeeverse.composemagic.stability.VariablePropertyArgumentDemo (StaticExpressionArguments.kt:247)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1366317089, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 2049150940, "C256@7580L25,255@7534L154,264@7808L11,260@7693L229,268@7927L53,270@7986L57:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT variablePropertyArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -72437419, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(variableProperty), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    VariablePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StaticVariableArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1292118489)
  sourceInformation($composer, "C(StaticVariableArgumentDemo)276@8140L33,278@8177L680:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1292118489, $changed, -1, "boo.kodeeverse.composemagic.stability.StaticVariableArgumentDemo (StaticExpressionArguments.kt:274)")
    }
    val myStaticValue = 1234
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 480321882, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1920716344, "C284@8393L25,283@8349L152,292@8621L11,288@8506L229,296@8740L53,298@8799L54:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT staticVariableArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1308876370, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(myStaticValue), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticVariableArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun StaticExpressionArgument(value: Long, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-409569386)
  sourceInformation($composer, "C(StaticExpressionArgument)N(value)304@8966L25,303@8927L148:StaticExpressionArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-409569386, $dirty, -1, "boo.kodeeverse.composemagic.stability.StaticExpressionArgument (StaticExpressionArguments.kt:302)")
    }
    Text("StaticExpressionArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
($value)", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111101110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticExpressionArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Stable
private fun currentMsCall(value: Any): Long {
  return currentTimeMillis() + value.hashCode()
}
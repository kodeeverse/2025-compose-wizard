val topLevelStableObject: MyStableClass = MyStableClass()
@Stable
val topLevelStableProperty: MyRegularClass = MyRegularClass()
private class MyEnum : Enum<MyEnum> {
  <<IrEnumEntryImpl>>
  fun values(): Array<MyEnum> { }
  fun valueOf(value: String): MyEnum { }
  val entries: EnumEntries<MyEnum>
    get() {
      <<IrSyntheticBodyImpl>>
    }
}
@Stable
private class MyStableClass 
private open class MyRegularClass {
  var a: Any = listOf(1)
  object Companion : MyRegularClass 
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ConstArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1191579306)
  sourceInformation($composer, "C(ConstArgumentDemo)49@1618L33,51@1655L659:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1191579306, $changed, -1, "boo.kodeeverse.composemagic.stability.ConstArgumentDemo (StaticExpressionArguments.kt:48)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1648556311, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1678748148, "C57@1862L25,56@1827L143,65@2090L11,61@1975L229,69@2209L53,71@2268L42:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT constArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1162539767, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(1), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ConstArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun EnumEntryArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-43892636)
  sourceInformation($composer, "C(EnumEntryArgumentDemo)76@2375L33,78@2412L670:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-43892636, $changed, -1, "boo.kodeeverse.composemagic.stability.EnumEntryArgumentDemo (StaticExpressionArguments.kt:75)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 768851237, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1582933115, "C84@2623L25,83@2584L147,92@2851L11,88@2736L229,96@2970L53,98@3029L49:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT enumEntryArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1713638405, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(MyEnum.A), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    EnumEntryArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun CompanionObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1463723742)
  sourceInformation($composer, "C(CompanionObjectArgumentDemo)103@3149L33,105@3186L692:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1463723742, $changed, -1, "boo.kodeeverse.composemagic.stability.CompanionObjectArgumentDemo (StaticExpressionArguments.kt:102)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -2110755361, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1847269099, "C111@3403L25,110@3358L153,119@3631L11,115@3516L229,123@3750L53,125@3809L65:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT companionObjectArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1741517761, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(Companion), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    CompanionObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun TopLevelStableObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1772207928)
  sourceInformation($composer, "C(TopLevelStableObjectArgumentDemo)130@3950L33,132@3987L693:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1772207928, $changed, -1, "boo.kodeeverse.composemagic.stability.TopLevelStableObjectArgumentDemo (StaticExpressionArguments.kt:129)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -2010195879, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1168497948, "C138@4209L25,137@4159L158,146@4437L11,142@4322L229,150@4556L53,152@4615L61:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT topLevelStableObjectArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1007533197, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(topLevelStableObject), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    TopLevelStableObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun TopLevelStablePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(374085966)
  sourceInformation($composer, "C(TopLevelStablePropertyArgumentDemo)157@4754L33,159@4791L697:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(374085966, $changed, -1, "boo.kodeeverse.composemagic.stability.TopLevelStablePropertyArgumentDemo (StaticExpressionArguments.kt:156)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1280637649, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1944632898, "C165@5015L25,164@4963L160,173@5243L11,169@5128L229,177@5362L53,179@5421L63:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT topLevelStablePropertyArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -352903453, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(topLevelStableProperty), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    TopLevelStablePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StaticVariableArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1292118489)
  sourceInformation($composer, "C(StaticVariableArgumentDemo)185@5581L33,187@5618L680:StaticExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1292118489, $changed, -1, "boo.kodeeverse.composemagic.stability.StaticVariableArgumentDemo (StaticExpressionArguments.kt:183)")
    }
    val myStaticValue = 1234
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 480321882, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1920716344, "C193@5834L25,192@5790L152,201@6062L11,197@5947L229,205@6181L53,207@6240L54:StaticExpressionArguments.kt#b558il")
      Text("${"ROOT staticVariableArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
      "}${"(${currentTimeMillis()})"}", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111101111111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1308876370, "CC(remember):StaticExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      StaticExpressionArgument(currentMsCall(myStaticValue), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticVariableArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun StaticExpressionArgument(value: Long, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-409569386)
  sourceInformation($composer, "C(StaticExpressionArgument)N(value)213@6407L25,212@6368L148:StaticExpressionArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changed(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-409569386, $dirty, -1, "boo.kodeeverse.composemagic.stability.StaticExpressionArgument (StaticExpressionArguments.kt:211)")
    }
    Text("StaticExpressionArgument @ ${<get-currentRecomposeScopeHash>($composer, 0)}
($value)", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111101110111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticExpressionArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Stable
private fun currentMsCall(value: Any): Long {
  return currentTimeMillis() + value.hashCode()
}
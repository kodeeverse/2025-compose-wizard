val stableValueProperty: MyStableClass = MyStableClass()
val unstableValueBoundsStableTypeProperty: MyStableClass = MyUnstableClass()
@Stable
var stableVariableProperty: MyStableClass = MyStableClass()
  get() {
    return MyStableClass()
  }
  set(value) {
    .stableVariableProperty = MyStableClass()
  }
var variableProperty: MyStableClass = MyStableClass()
  get() {
    return MyStableClass()
  }
  set(value) {
    .variableProperty = MyStableClass()
  }
private class MyEnum : Enum<MyEnum> {
  <<IrEnumEntryImpl>>
  fun values(): Array<MyEnum> { }
  fun valueOf(value: String): MyEnum { }
  val entries: EnumEntries<MyEnum>
    get() {
      <<IrSyntheticBodyImpl>>
    }
}
@Stable
private object StableObject 
private object UnstableObject {
  var a: Any = listOf(1)
}
@Stable
private open class MyStableClass 
private open class MyUnstableClass : MyStableClass {
  var a: Any = listOf(1)
  object Companion : MyUnstableClass 
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun ConstArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-587058040)
  sourceInformation($composer, "C(ConstArgumentDemo)64@1972L33,66@2009L569:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-587058040, $changed, -1, "boo.kodeeverse.composemagic.stability.ConstArgumentDemo (ExpressionArguments.kt:63)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1522059319, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1275824612, "C71@2181L35,76@2336L11,72@2221L253,81@2479L53,83@2538L36:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT constArgument", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -318245719, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(1), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ConstArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun EnumEntryArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1834903062)
  sourceInformation($composer, "C(EnumEntryArgumentDemo)88@2639L33,90@2676L582:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1834903062, $changed, -1, "boo.kodeeverse.composemagic.stability.EnumEntryArgumentDemo (ExpressionArguments.kt:87)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1889714601, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -961167775, "C95@2848L41,100@3009L11,96@2894L253,105@3152L53,107@3211L43:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT enumEntryArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1970663305, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(MyEnum.A), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    EnumEntryArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun CompanionObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-465588208)
  sourceInformation($composer, "C(CompanionObjectArgumentDemo)112@3325L33,114@3362L605:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-465588208, $changed, -1, "boo.kodeeverse.composemagic.stability.CompanionObjectArgumentDemo (ExpressionArguments.kt:111)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -753667439, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1629486448, "C119@3534L47,124@3701L11,120@3586L253,129@3844L53,131@3903L60:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT companionObjectArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 191116337, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(Companion), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    CompanionObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(193026587)
  sourceInformation($composer, "C(StableObjectArgumentDemo)136@4031L33,138@4068L589:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(193026587, $changed, -1, "boo.kodeeverse.composemagic.stability.StableObjectArgumentDemo (ExpressionArguments.kt:135)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 814957948, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 576408897, "C143@4240L44,148@4404L11,144@4289L253,153@4547L53,155@4606L47:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT stableObjectArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1366874640, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(StableObject), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableObjectArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1266461516)
  sourceInformation($composer, "C(UnstableObjectArgumentDemo)160@4723L33,162@4760L593:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1266461516, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableObjectArgumentDemo (ExpressionArguments.kt:159)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1593770475, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1217496316, "C167@4932L46,172@5098L11,168@4983L253,177@5241L53,179@5300L49:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT unstableObjectArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1900393481, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(UnstableObject), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableObjectArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableValuePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-604377968)
  sourceInformation($composer, "C(StableValuePropertyArgumentDemo)184@5424L33,186@5461L603:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-604377968, $changed, -1, "boo.kodeeverse.composemagic.stability.StableValuePropertyArgumentDemo (ExpressionArguments.kt:183)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -986640495, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1984641970, "C191@5633L51,196@5804L11,192@5689L253,201@5947L53,203@6006L54:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT stableValuePropertyArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 479667761, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(stableValueProperty), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableValuePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun UnstableValueBoundsStableTypePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1988460639)
  sourceInformation($composer, "C(UnstableValueBoundsStableTypePropertyArgumentDemo)208@6153L33,210@6190L639:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1988460639, $changed, -1, "boo.kodeeverse.composemagic.stability.UnstableValueBoundsStableTypePropertyArgumentDemo (ExpressionArguments.kt:207)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 349775010, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1788479709, "C215@6362L69,220@6551L11,216@6436L253,225@6694L53,227@6753L72:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT unstableValueBoundsStableTypePropertyArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 334793154, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(unstableValueBoundsStableTypeProperty), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    UnstableValueBoundsStableTypePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StableVariablePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-2028002803)
  sourceInformation($composer, "C(StableVariablePropertyArgumentDemo)232@6903L33,234@6940L678:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-2028002803, $changed, -1, "boo.kodeeverse.composemagic.stability.StableVariablePropertyArgumentDemo (ExpressionArguments.kt:231)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1004460590, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -578472106, "C239@7112L54,244@7286L80,240@7171L322,252@7498L53,254@7557L57:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT stableVariablePropertyArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -434297241, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            stableVariableProperty = MyStableClass()
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(stableVariableProperty), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StableVariablePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun VariablePropertyArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(609541170)
  sourceInformation($composer, "C(VariablePropertyArgumentDemo)259@7686L33,261@7723L597:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(609541170, $changed, -1, "boo.kodeeverse.composemagic.stability.VariablePropertyArgumentDemo (ExpressionArguments.kt:258)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1653513811, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1414665666, "C266@7895L48,271@8063L11,267@7948L253,276@8206L53,278@8265L51:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT variablePropertyArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 876923335, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(variableProperty), $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    VariablePropertyArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun StaticVariableArgumentDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1899350859)
  sourceInformation($composer, "C(StaticVariableArgumentDemo)284@8415L33,286@8452L592:ExpressionArguments.kt#b558il")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1899350859, $changed, -1, "boo.kodeeverse.composemagic.stability.StaticVariableArgumentDemo (ExpressionArguments.kt:282)")
    }
    val myStaticValue = "가나다라"
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -84922740, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1687885586, "C291@8624L46,296@8790L11,292@8675L253,301@8933L53,303@8992L48:ExpressionArguments.kt#b558il")
      CurrentMsText("ROOT staticVariableArgument
", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -885727008, "CC(remember):ExpressionArguments.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      ExpressionArgument(currentMsCall(myStaticValue), $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    StaticVariableArgumentDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
private fun ExpressionArgument(value: Any, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(2083390132)
  sourceInformation($composer, "C(ExpressionArgument)N(value)308@9107L61:ExpressionArguments.kt#b558il")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changedInstance(value)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(2083390132, $dirty, -1, "boo.kodeeverse.composemagic.stability.ExpressionArgument (ExpressionArguments.kt:307)")
    }
    CurrentMsText("ExpressionArgument", null, null, value as Long, $composer, 0b0110 or 0b0001110000000000 and $dirty shl 0b1001, 0b0110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    ExpressionArgument(value, $composer, updateChangedFlags($changed or 0b0001))
  }
}
@Stable
private fun currentMsCall(value: Any): Long {
  return currentTimeMillis() + value.hashCode()
}
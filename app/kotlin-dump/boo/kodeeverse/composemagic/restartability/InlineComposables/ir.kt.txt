@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun InlineComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1036276479)
  sourceInformation($composer, "C(InlineComposableDemo)28@1128L279:InlineComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1036276479, $changed, -1, "boo.kodeeverse.composemagic.restartability.InlineComposableDemo (InlineComposables.kt:27)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1669489563, "C33@1300L21,34@1326L53,36@1385L18:InlineComposables.kt#5mdrpd")
      CurrentMsText("ROOT", null, null, null, $composer, 0b0110, 0b1110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      InlineComposable($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    InlineComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun NonInlineComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1873035408)
  sourceInformation($composer, "C(NonInlineComposableDemo)41@1457L282:InlineComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1873035408, $changed, -1, "boo.kodeeverse.composemagic.restartability.NonInlineComposableDemo (InlineComposables.kt:40)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 327519231, "C46@1629L21,47@1655L53,49@1714L21:InlineComposables.kt#5mdrpd")
      CurrentMsText("ROOT", null, null, null, $composer, 0b0110, 0b1110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      NonInlineComposable($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    NonInlineComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun InlineComposable($composer: Composer?, $changed: Int) {
  sourceInformationMarkerStart($composer, 1447179108, "CC(InlineComposable)54@1810L33,56@1847L30,61@1987L11,57@1880L237:InlineComposables.kt#5mdrpd")
  var count by {
    val count$delegate = <block>{
      sourceInformationMarkerStart($composer, -830279803, "CC(remember):InlineComposables.kt#9igjgp")
      val tmp0_group = $composer.cache(false) {
        mutableIntStateOf(0)
      }
      sourceInformationMarkerEnd($composer)
      tmp0_group
    }
    get() {
      return count$delegate.getValue(null, ::count$delegate)
    }
    set(<set-?>: Int) {
      return count$delegate.setValue(null, ::count$delegate, <set-?>)
    }
  }
  CurrentMsText("InlineContent", null, null, null, $composer, 0b0110, 0b1110)
  Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
    onClick = sourceInformationMarkerStart($composer, -830274161, "CC(remember):InlineComposables.kt#9igjgp")
    val tmp1_group = $composer.cache(false) {
      {
        <get-count>()++
      }
    }
    sourceInformationMarkerEnd($composer)
    tmp1_group
  ).background(
    color = Companion.Green
  ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
  sourceInformationMarkerEnd($composer)
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun NonInlineComposable($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(728295027)
  sourceInformation($composer, "C(NonInlineComposable)69@2184L33,71@2221L33,76@2364L11,72@2257L237:InlineComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(728295027, $changed, -1, "boo.kodeeverse.composemagic.restartability.NonInlineComposable (InlineComposables.kt:68)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -188146892, "CC(remember):InlineComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    CurrentMsText("NonInlineContent", null, null, null, $composer, 0b0110, 0b1110)
    Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
      onClick = sourceInformationMarkerStart($composer, -188141154, "CC(remember):InlineComposables.kt#9igjgp")
      val tmp1_group = $composer.cache(false) {
        {
          <get-count>()++
        }
      }
      sourceInformationMarkerEnd($composer)
      tmp1_group
    ).background(
      color = Companion.Green
    ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    NonInlineComposable($composer, updateChangedFlags($changed or 0b0001))
  }
}
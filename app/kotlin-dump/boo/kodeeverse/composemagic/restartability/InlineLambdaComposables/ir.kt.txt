@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun InlineLambdaComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1473441631)
  sourceInformation($composer, "C(InlineLambdaComposableDemo)28@1147L33,30@1184L592:InlineLambdaComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1473441631, $changed, -1, "boo.kodeeverse.composemagic.restartability.InlineLambdaComposableDemo (InlineLambdaComposables.kt:27)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, 1361801922, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -404448340, "C35@1356L21,40@1497L11,36@1382L253,45@1640L53,47@1699L73:InlineLambdaComposables.kt#5mdrpd")
      CurrentMsText("ROOT", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -290137278, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      InlineLambdaComposable({ $composer: Composer?, $changed: Int ->
        sourceInformationMarkerStart($composer, -1219984978, "C48@1730L36:InlineLambdaComposables.kt#5mdrpd")
        CurrentMsText("InlineLambdaContent", null, null, null, $composer, 0b0110, 0b1110)
        sourceInformationMarkerEnd($composer)
      }, $composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    InlineLambdaComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun NoInlineLambdaComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(1644138528)
  sourceInformation($composer, "C(NoInlineLambdaComposableDemo)54@1844L33,56@1881L596:InlineLambdaComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(1644138528, $changed, -1, "boo.kodeeverse.composemagic.restartability.NoInlineLambdaComposableDemo (InlineLambdaComposables.kt:53)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -530837823, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -553382455, "C61@2053L21,66@2194L11,62@2079L253,71@2337L53,73@2396L77:InlineLambdaComposables.kt#5mdrpd")
      CurrentMsText("ROOT", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1090531713, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      NoInlineLambdaComposable(ComposableSingletons$InlineLambdaComposablesKt.lambda$-1733737871, $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    NoInlineLambdaComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun NonInlineLambdaComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-243153488)
  sourceInformation($composer, "C(NonInlineLambdaComposableDemo)80@2546L33,82@2583L598:InlineLambdaComposables.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-243153488, $changed, -1, "boo.kodeeverse.composemagic.restartability.NonInlineLambdaComposableDemo (InlineLambdaComposables.kt:79)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -1742266255, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 884381731, "C87@2755L21,92@2896L11,88@2781L253,97@3039L53,99@3098L79:InlineLambdaComposables.kt#5mdrpd")
      CurrentMsText("ROOT", null, null, null, $composer, 0b0110, 0b1110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, 1275458533, "CC(remember):InlineLambdaComposables.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      NonInlineLambdaComposable(ComposableSingletons$InlineLambdaComposablesKt.lambda$-675349333, $composer, 0b0110)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    NonInlineLambdaComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
private fun InlineLambdaComposable(content: Function2<Composer, Int, Unit>, $composer: Composer?, $changed: Int) {
  sourceInformationMarkerStart($composer, -49041035, "CC(InlineLambdaComposable)N(content)106@3276L9:InlineLambdaComposables.kt#5mdrpd")
  content($composer, 0b1110 and $changed)
  sourceInformationMarkerEnd($composer)
}
@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
private fun NoInlineLambdaComposable(noinline content: Function2<Composer, Int, Unit>, $composer: Composer?, $changed: Int) {
  sourceInformationMarkerStart($composer, 1768973334, "CC(NoInlineLambdaComposable)N(content)110@3391L9:InlineLambdaComposables.kt#5mdrpd")
  content($composer, 0b1110 and $changed)
  sourceInformationMarkerEnd($composer)
}
@Composable
@ComposableInferredTarget(scheme = "[0[0]]")
private fun NonInlineLambdaComposable(content: Function2<Composer, Int, Unit>, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-1163240314)
  sourceInformation($composer, "C(NonInlineLambdaComposable)N(content)114@3491L9:InlineLambdaComposables.kt#5mdrpd")
  val $dirty = $changed
  if ($changed and 0b0110 == 0) {
    $dirty = $dirty or if ($composer.changedInstance(content)) 0b0100 else 0b0010
  }
  if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-1163240314, $dirty, -1, "boo.kodeeverse.composemagic.restartability.NonInlineLambdaComposable (InlineLambdaComposables.kt:113)")
    }
    content($composer, 0b1110 and $dirty)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    NonInlineLambdaComposable(content, $composer, updateChangedFlags($changed or 0b0001))
  }
}
internal object ComposableSingletons$InlineLambdaComposablesKt {
  val lambda$-1733737871: Function2<Composer, Int, Unit> = composableLambdaInstance(-1733737871, false) { $composer: Composer?, $changed: Int ->
    sourceInformation($composer, "C74@2429L38:InlineLambdaComposables.kt#5mdrpd")
    if ($composer.shouldExecute($changed and 0b0011 != 0b0010, $changed and 0b0001)) {
      if (isTraceInProgress()) {
        traceEventStart(-1733737871, $changed, -1, "boo.kodeeverse.composemagic.restartability.ComposableSingletons$InlineLambdaComposablesKt.lambda$-1733737871.<anonymous> (InlineLambdaComposables.kt:74)")
      }
      CurrentMsText("NoInlineLambdaContent", null, null, null, $composer, 0b0110, 0b1110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      $composer.skipToGroupEnd()
    }
  }
  val lambda$-675349333: Function2<Composer, Int, Unit> = composableLambdaInstance(-675349333, false) { $composer: Composer?, $changed: Int ->
    sourceInformation($composer, "C100@3132L39:InlineLambdaComposables.kt#5mdrpd")
    if ($composer.shouldExecute($changed and 0b0011 != 0b0010, $changed and 0b0001)) {
      if (isTraceInProgress()) {
        traceEventStart(-675349333, $changed, -1, "boo.kodeeverse.composemagic.restartability.ComposableSingletons$InlineLambdaComposablesKt.lambda$-675349333.<anonymous> (InlineLambdaComposables.kt:100)")
      }
      CurrentMsText("NonInlineLambdaContent", null, null, null, $composer, 0b0110, 0b1110)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      $composer.skipToGroupEnd()
    }
  }
}
interface FunctionalComposable {
  @Composable
  abstract fun Content($composer: Composer?, $changed: Int) 
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun LocalComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(658037824)
  sourceInformation($composer, "C(LocalComposableDemo)33@1332L799:LocalComposable.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(658037824, $changed, -1, "boo.kodeeverse.composemagic.restartability.LocalComposableDemo (LocalComposable.kt:32)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1293148522, "C38@1518L25,38@1504L66,39@1575L53,58@2120L7:LocalComposable.kt#5mdrpd")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      @Composable
      @ComposableTarget(applier = "androidx.compose.ui.UiComposable")
      fun Local($composer: Composer?, $changed: Int) {
        sourceInformationMarkerStart($composer, 750711959, "C(Local)42@1679L33,45@1760L25,44@1720L138,52@1988L11,48@1865L243:LocalComposable.kt#5mdrpd")
        if (isTraceInProgress()) {
          traceEventStart(750711959, $changed, -1, "boo.kodeeverse.composemagic.restartability.LocalComposableDemo.<anonymous>.Local (LocalComposable.kt:41)")
        }
        var count by {
          val count$delegate = <block>{
            sourceInformationMarkerStart($composer, -120312040, "CC(remember):LocalComposable.kt#9igjgp")
            val tmp0_group = $composer.cache(false) {
              mutableIntStateOf(0)
            }
            sourceInformationMarkerEnd($composer)
            tmp0_group
          }
          get() {
            return count$delegate.getValue(null, ::count$delegate)
          }
          set(<set-?>: Int) {
            return count$delegate.setValue(null, ::count$delegate, <set-?>)
          }
        }
        Text("LocalComposable.Local @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
        Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
          onClick = sourceInformationMarkerStart($composer, -120302174, "CC(remember):LocalComposable.kt#9igjgp")
          val tmp1_group = $composer.cache(false) {
            {
              <get-count>()++
            }
          }
          sourceInformationMarkerEnd($composer)
          tmp1_group
        ).background(
          color = Companion.Green
        ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
        if (isTraceInProgress()) {
          traceEventEnd()
        }
        sourceInformationMarkerEnd($composer)
      }
      Local($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    LocalComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun LocalFunctionalComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(695799933)
  sourceInformation($composer, "C(LocalFunctionalComposableDemo)63@2187L950:LocalComposable.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(695799933, $changed, -1, "boo.kodeeverse.composemagic.restartability.LocalFunctionalComposableDemo (LocalComposable.kt:62)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, -1764999466, "C68@2373L25,68@2359L66,69@2430L53,92@3124L9:LocalComposable.kt#5mdrpd")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      val local = <block>{
        class <no name provided> : FunctionalComposable {
          @Composable
          @ComposableTarget(applier = "androidx.compose.ui.UiComposable")
          override fun Content($composer: Composer?, $changed: Int) {
            $composer = $composer.startRestartGroup(-165981909)
            sourceInformation($composer, "C(Content)72@2543L33,75@2634L25,74@2584L272,86@2986L11,82@2863L243:LocalComposable.kt#5mdrpd")
            val $dirty = $changed
            if ($changed and 0b0110 == 0) {
              $dirty = $dirty or if ($composer.changed(<this>)) 0b0100 else 0b0010
            }
            if ($composer.shouldExecute($dirty and 0b0011 != 0b0010, $dirty and 0b0001)) {
              if (isTraceInProgress()) {
                traceEventStart(-165981909, $dirty, -1, "boo.kodeeverse.composemagic.restartability.LocalFunctionalComposableDemo.<anonymous>.<no name provided>.Content (LocalComposable.kt:72)")
              }
              var count by {
                val count$delegate = <block>{
                  sourceInformationMarkerStart($composer, -594823892, "CC(remember):LocalComposable.kt#9igjgp")
                  val tmp0_group = $composer.cache(false) {
                    mutableIntStateOf(0)
                  }
                  sourceInformationMarkerEnd($composer)
                  tmp0_group
                }
                get() {
                  return count$delegate.getValue(null, ::count$delegate)
                }
                set(<set-?>: Int) {
                  return count$delegate.setValue(null, ::count$delegate, <set-?>)
                }
              }
              Text("LocalFunctionalComposable.Local @ ${<get-currentRecomposeScopeHash>($composer, 0)}
(${currentTimeMillis()})", Companion.fillMaxWidth().wrapContentWidth(), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, Companion.Center, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000110000, 0, 0b00111111101110111100)
              Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
                onClick = sourceInformationMarkerStart($composer, -594809738, "CC(remember):LocalComposable.kt#9igjgp")
                val tmp1_group = $composer.cache(false) {
                  {
                    <get-count>()++
                  }
                }
                sourceInformationMarkerEnd($composer)
                tmp1_group
              ).background(
                color = Companion.Green
              ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111100)
              if (isTraceInProgress()) {
                traceEventEnd()
              }
            } else {
              $composer.skipToGroupEnd()
            }
            val tmp2_rcvr = <this>
            $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
              tmp2_rcvr.Content($composer, updateChangedFlags($changed or 0b0001))
            }
          }
        }
        <no name provided>()
      }
      local.Content($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    LocalFunctionalComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
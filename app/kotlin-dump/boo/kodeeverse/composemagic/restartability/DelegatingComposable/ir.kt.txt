@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun DelegatingComposableDemo($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-934660774)
  sourceInformation($composer, "C(DelegatingComposableDemo)29@1229L373:DelegatingComposable.kt#5mdrpd")
  if ($composer.shouldExecute($changed != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-934660774, $changed, -1, "boo.kodeeverse.composemagic.restartability.DelegatingComposableDemo (DelegatingComposable.kt:28)")
    }
    Column(Companion.wrapContentSize(), Arrangement.spacedBy(10.dp), Companion.CenterHorizontally, { $composer: Composer?, $changed: Int ->
      sourceInformationMarkerStart($composer, 1260178170, "C34@1415L25,34@1401L66,35@1472L53,38@1581L17:DelegatingComposable.kt#5mdrpd")
      Text("ROOT @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0, 0, 0b00111111111111111110)
      HorizontalDivider(Companion.fillMaxWidth(), <unsafe-coerce>(0.0f), <unsafe-coerce>(0L), $composer, 0b0110, 0b0110)
      val delegatingContent by {
        val delegatingContent$delegate = DelegatingComposable
        @Composable 
        get($composer: Composer?, $changed: Int) {
          sourceInformationMarkerStart($composer, 122453620, "C(<get-delegatingContent>)37@1556L20:DelegatingComposable.kt#5mdrpd")
          if (isTraceInProgress()) {
            traceEventStart(122453620, $changed, -1, "boo.kodeeverse.composemagic.restartability.DelegatingComposableDemo.<anonymous>.<get-delegatingContent> (DelegatingComposable.kt:37)")
          }
          delegatingContent$delegate.getValue(null, ::delegatingContent$delegate, $composer, 0b000110000110)
          if (isTraceInProgress()) {
            traceEventEnd()
          }
          sourceInformationMarkerEnd($composer)
        }
      }
      <get-delegatingContent>($composer, 0)
      sourceInformationMarkerEnd($composer)
    }, $composer, 0b000110110110, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    DelegatingComposableDemo($composer, updateChangedFlags($changed or 0b0001))
  }
}
private object DelegatingComposable {
  @Composable
  fun getValue(thisRef: Any?, property: KProperty<*>, $composer: Composer?, $changed: Int) {
    $composer = $composer.startRestartGroup(1843861788)
    sourceInformation($composer, "C(getValue)N(thisRef,property)46@2051L33,49@2127L25,48@2090L131,56@2341L11,52@2226L253:DelegatingComposable.kt#5mdrpd")
    if ($composer.shouldExecute($changed and 0b0001 != 0, $changed and 0b0001)) {
      if (isTraceInProgress()) {
        traceEventStart(1843861788, $changed, -1, "boo.kodeeverse.composemagic.restartability.DelegatingComposable.getValue (DelegatingComposable.kt:45)")
      }
      var count by {
        val count$delegate = <block>{
          sourceInformationMarkerStart($composer, -1870312675, "CC(remember):DelegatingComposable.kt#9igjgp")
          val tmp0_group = $composer.cache(false) {
            mutableIntStateOf(0)
          }
          sourceInformationMarkerEnd($composer)
          tmp0_group
        }
        get() {
          return count$delegate.getValue(null, ::count$delegate)
        }
        set(<set-?>: Int) {
          return count$delegate.setValue(null, ::count$delegate, <set-?>)
        }
      }
      Text("DelegatingComposable @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
      Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
        onClick = sourceInformationMarkerStart($composer, -1870303417, "CC(remember):DelegatingComposable.kt#9igjgp")
        val tmp1_group = $composer.cache(false) {
          {
            <get-count>()++
          }
        }
        sourceInformationMarkerEnd($composer)
        tmp1_group
      ).background(
        color = Companion.Green
      ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      $composer.skipToGroupEnd()
    }
    val tmp2_rcvr = <this>
    $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
      tmp2_rcvr.getValue(thisRef, property, $composer, updateChangedFlags($changed or 0b0001))
    }
  }
}
private object DelegatingComposable2 
@Composable
private fun DelegatingComposable2.getValue(thisRef: Any?, property: KProperty<*>, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-31843114)
  sourceInformation($composer, "C(getValue)N(thisRef,property)67@2645L33,70@2717L25,69@2682L125,77@2917L11,73@2810L237:DelegatingComposable.kt#5mdrpd")
  if ($composer.shouldExecute($changed and 0b0001 != 0, $changed and 0b0001)) {
    if (isTraceInProgress()) {
      traceEventStart(-31843114, $changed, -1, "boo.kodeeverse.composemagic.restartability.getValue (DelegatingComposable.kt:66)")
    }
    var count by {
      val count$delegate = <block>{
        sourceInformationMarkerStart($composer, -536458537, "CC(remember):DelegatingComposable.kt#9igjgp")
        val tmp0_group = $composer.cache(false) {
          mutableIntStateOf(0)
        }
        sourceInformationMarkerEnd($composer)
        tmp0_group
      }
      get() {
        return count$delegate.getValue(null, ::count$delegate)
      }
      set(<set-?>: Int) {
        return count$delegate.setValue(null, ::count$delegate, <set-?>)
      }
    }
    Text("DelegatingComposable @ ${<get-currentRecomposeScopeHash>($composer, 0)} (${currentTimeMillis()})", null, <unsafe-coerce>(0L), null, <unsafe-coerce>(0L), null, Companion.Bold, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b000110000000000000000000, 0, 0b00111111111110111110)
    Text("count: ${<get-count>()}", Companion.clip(RoundedCornerShape(10.dp)).clickable(
      onClick = sourceInformationMarkerStart($composer, -536449855, "CC(remember):DelegatingComposable.kt#9igjgp")
      val tmp1_group = $composer.cache(false) {
        {
          <get-count>()++
        }
      }
      sourceInformationMarkerEnd($composer)
      tmp1_group
    ).background(
      color = Companion.Green
    ).padding(20.dp, 10.dp), <unsafe-coerce>(0L), null, 20.sp, null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b0110000000000000, 0, 0b00111111111111101100)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    <this>.getValue(thisRef, property, $composer, updateChangedFlags($changed or 0b0001))
  }
}